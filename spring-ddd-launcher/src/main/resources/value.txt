<script lang="ts" setup>
import type { VbenFormProps } from '#/adapter/form';
import type { VxeTableGridOptions } from '#/adapter/vxe-table';

import { ref } from 'vue';

import { useAccess } from '@vben/access';
import { confirm, Page } from '@vben/common-ui';
import { $t } from '@vben/locales';

import { ElButton, ElMessage } from 'element-plus';
<#assign filteredProperties = columnsViews?filter(p -> p.propDictId?exists && p.propDictId?has_content)>
<#if filteredProperties?has_content>
import Dict from '#/adapter/component/Dict.vue';
</#if>
import { useVbenVxeGrid } from '#/adapter/vxe-table';
import { delete${className}, get${className}Page } from '#/api/${requestName}';

import ${className}Form from './form.vue';
import RecycleForm from './recycle.vue';

const { hasAccessByCodes } = useAccess();

const ${requestName}FormRef = ref();
const recycleFormRef = ref();

interface RowType {
<#assign excludeFields = ["createBy", "createTime", "updateBy", "updateTime", "version", "deleteStatus"]>
<#list columnsViews as property>
    <#if !(excludeFields?seq_contains(property.propJavaEntity))>
  ${property.propJavaEntity}: ${property.typescriptTypeStr};
    </#if>
</#list>
}
<#assign filteredProperties = columnsViews?filter(p -> p.tableFilter)>
<#if filteredProperties?has_content>
const formOptions: VbenFormProps = {
    collapsed: false,
    schema: [
        <#list filteredProperties as property>
        {
            component: "${property.tableFilterComponent}",
            componentProps: {
                placeholder: `<#noparse>${$t('system.common.placeholder.input')}</#noparse> ${'$t(\'' + requestName + '.' + property.propJavaEntity + '\')'}`,
            },
            fieldName: '${property.propJavaEntity}',
            label: "$t('${requestName}.${property.propJavaEntity}')",
        }<#if property_has_next>,</#if>
        </#list>
    ],
    showCollapseButton: true,
    submitButtonOptions: {
        content: "$t('system.common.button.search')",
    },
    resetButtonOptions: {
        content: "$t('system.common.button.reset')",
    },
    submitOnChange: false,
    submitOnEnter: true,
};
</#if>
const gridOptions: VxeTableGridOptions<RowType> = {
  checkboxConfig: {
    highlight: true,
  },
  columnConfig: {
    resizable: true,
  },
  rowConfig: {
    isHover: true,
  },
  columns: [
    { title: 'No.', type: 'seq', width: 50 },
    { align: 'left', title: '#', type: 'checkbox', width: 50 },
<#assign excludeFields = ["id", "createBy", "createTime", "updateBy", "updateTime", "version", "deleteStatus"]>
<#list columnsViews as property>
    <#if !(excludeFields?seq_contains(property.propJavaEntity))>
    <#if property?has_content && property.propDictId?has_content>
    {
      field: '${property.propJavaEntity}',
      title: $t('${requestName}.${property.propJavaEntity}'),
      slots: { default: '${property.propJavaEntity}' },
    },
    <#else>
    { field: '${property.propJavaEntity}', title: $t('${requestName}.${property.propJavaEntity}') },
    </#if>
    </#if>
</#list>
    {
      field: 'action',
      fixed: 'right',
      slots: { default: 'action' },
      title: <#noparse>$t('system.common.operation')</#noparse>,
      width: 150,
    },
  ],
  exportConfig: {},
  keepSource: true,
  proxyConfig: {
    ajax: {
<#assign filteredProperties = columnsViews?filter(p -> p.tableFilter)>
<#if filteredProperties?has_content>
      query: async ({ page }, formOptions) => {
        return await get${className}Page({
          pageNum: page.currentPage,
          pageSize: page.pageSize,
          ...formOptions,
        });
      },
<#else>
      query: async ({ page }) => {
        return await get${className}Page({
          pageNum: page.currentPage,
          pageSize: page.pageSize,
        });
      },
</#if>
    },
  },
  editConfig: {
    mode: 'row',
    trigger: 'click',
  },
  toolbarConfig: {
    custom: true,
    export: true,
    // import: true,
    refresh: true,
    zoom: true,
    search: false,
  },
};

const [Grid, gridApi] = useVbenVxeGrid({
  gridOptions,
<#assign filteredProperties = columnsViews?filter(p -> p.tableFilter)>
<#if filteredProperties?has_content>
  formOptions,
</#if>
});

const openRecycleForm = () => {
  recycleFormRef.value?.open();
};

const openForm = () => {
  ${requestName}FormRef.value?.open();
};

const editRow = (row: RowType) => {
  ${requestName}FormRef.value?.open(row);
};

const deleteByIds = (row?: RowType) => {
  const ids: string[] = row
    ? [row.id]
    : gridApi.grid.getCheckboxRecords().map((item) => item.id);

  if (ids.length === 0) {
    ElMessage.warning(<#noparse>$t('system.common.delete.warning')</#noparse>);
    return;
  }

  confirm({
    content: <#noparse>$t('system.common.delete.confirm')</#noparse>,
    icon: 'error',
  }).then(async () => {
    try {
      await delete${requestName}(ids);
      await gridApi.reload();
      ElMessage.success(<#noparse>$t('system.common.delete.success')</#noparse>);
    } catch {
      ElMessage.error(<#noparse>$t('system.common.delete.error')</#noparse>);
    }
  });
};
</script>

<template>
  <Page>
    <Grid>
<#assign filteredProperties = columnsViews?filter(p -> p.propDictId?exists && p.propDictId?has_content)>
<#if filteredProperties?has_content>
<#list columnsViews as property>
<#if property?has_content && property.propDictId?has_content>
      <template #${property.propJavaEntity}="{ row }">
        <Dict dict-key="${property.propDictStr}" :value="row.${property.propJavaEntity}" />
      </template>
</#if>
</#list>
</#if>
      <template #toolbar-actions>
        <ElButton
          class="mr-2"
          bg
          text
          type="primary"
          @click="openForm"
          v-if="hasAccessByCodes(['${requestName}:create'])"
        >
          {{ <#noparse>$t('system.common.button.add')</#noparse> }}
        </ElButton>
        <ElButton
          class="mr-2"
          bg
          text
          type="danger"
          @click="deleteByIds()"
          v-if="hasAccessByCodes(['${requestName}:delete'])"
        >
          {{ <#noparse>$t('system.common.button.delete')</#noparse> }}
        </ElButton>
        <ElButton
          class="mr-2"
          bg
          text
          type="info"
          @click="openRecycleForm"
          v-if="hasAccessByCodes(['${requestName}:recycle'])"
        >
          {{ <#noparse>$t('system.common.button.recycle')</#noparse> }}
        </ElButton>
      </template>
      <template #action="{ row }">
        <ElButton
          type="primary"
          link
          @click="editRow(row)"
          v-if="hasAccessByCodes(['${requestName}:update'])"
        >
          {{ <#noparse>$t('system.common.button.edit')</#noparse> }}
        </ElButton>
        <ElButton
          type="danger"
          link
          @click="deleteByIds(row)"
          v-if="hasAccessByCodes(['${requestName}:delete'])"
        >
          {{ <#noparse>$t('system.common.button.delete')</#noparse> }}
        </ElButton>
      </template>
    </Grid>
    <${className}Form ref="${requestName}FormRef" :grid-api="gridApi" />
    <RecycleForm ref="recycleFormRef" :grid-api="gridApi" />
  </Page>
</template>
