package ${packageName}.application.service.${requestName};

import ${packageName}.domain.auth.SecurityUtils;
import ${packageName}.domain.${requestName}.*;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

import java.util.List;

@Component
@RequiredArgsConstructor
public class Restore${className}DomainServiceImpl implements Restore${className}DomainService {

    private final ${className}DomainRepository domainRepository;
    <#assign idParams = []>
    <#list aggregateViews as aggregateView>
        <#if aggregateView.objectType == 1>
            <#assign idParams += [aggregateView.objectName]>
        </#if>
    </#list>

    @Override
    public Mono<Void> restoreByIds(List<Long> ids) {
        return Flux.fromIterable(ids)
                .flatMap(id -> domainRepository.load(new ${idParams?join(", ")}(id))
                        .flatMap(domain -> {
                            domain.restore();
                            return domainRepository.save(domain);
                        }), SecurityUtils.concurrency())
                .then();
    }
}
