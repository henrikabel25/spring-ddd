<script lang="ts" setup>
import type { VbenFormProps } from '#/adapter/form';
import type { VxeTableGridOptions } from '#/adapter/vxe-table';

import { ref } from 'vue';

import { useAccess } from '@vben/access';
import { confirm, Page } from '@vben/common-ui';
import { $t } from '@vben/locales';

import { ElButton, ElMessage } from 'element-plus';
<#assign filteredProperties = columnsViews?filter(p -> p.propDictId?exists && p.propDictId?has_content)>
<#if filteredProperties?has_content>
import Dict from '#/adapter/component/Dict.vue';
</#if>
import { useVbenVxeGrid } from '#/adapter/vxe-table';
import { get${className}RecyclePage, restore${className}, wipe${className} } from '#/api/${requestName}';

const props = defineProps<{
  gridApi: any;
}>();

const { hasAccessByCodes } = useAccess();

interface RowType {
<#assign excludeFields = ["createBy", "createTime", "updateBy", "updateTime", "version", "deleteStatus"]>
<#list columnsViews as property>
    <#if !(excludeFields?seq_contains(property.propJavaEntity))>
  ${property.propJavaEntity}: ${property.typescriptTypeStr};
    </#if>
</#list>
}

const gridOptions: VxeTableGridOptions<RowType> = {
  checkboxConfig: {
    highlight: true,
  },
  columnConfig: {
    resizable: true,
  },
  rowConfig: {
    isHover: true,
  },
  columns: [
    { title: 'No.', type: 'seq', width: 50 },
    { align: 'left', title: '#', type: 'checkbox', width: 50 },
<#assign excludeFields = ["id", "createBy", "createTime", "updateBy", "updateTime", "version", "deleteStatus"]>
<#list columnsViews as property>
    <#if !(excludeFields?seq_contains(property.propJavaEntity))>
    <#if property?has_content && property.propDictId?has_content>
    {
      field: '${property.propJavaEntity}',
      title: $t('${requestName}.${property.propJavaEntity}'),
      slots: { default: '${property.propJavaEntity}' },
    },
    <#else>
    { field: '${property.propJavaEntity}', title: $t('${requestName}.${property.propJavaEntity}') },
    </#if>
    </#if>
</#list>
    {
      field: 'action',
      fixed: 'right',
      slots: { default: 'action' },
      title: <#noparse>$t('system.common.operation')</#noparse>,
      width: 150,
    },
  ],
  exportConfig: {},
  keepSource: true,
  proxyConfig: {
    ajax: {
      query: async ({ page }) => {
        return await get${className}Page({
          pageNum: page.currentPage,
          pageSize: page.pageSize,
        });
      },
    },
  },
  editConfig: {
    mode: 'row',
    trigger: 'click',
  },
  toolbarConfig: {
    custom: true,
    export: true,
    // import: true,
    refresh: true,
    zoom: true,
    search: false,
  },
};

const [Grid, localGridApi] = useVbenVxeGrid({
  gridOptions,
});

const wipeMethod = (row?: RowType) => {
  const ids: string[] = row
    ? [row.id]
    : localGridApi.grid.getCheckboxRecords().map((item) => item.id);

  if (ids.length === 0) {
    ElMessage.warning($t('system.common.delete.warning'));
    return;
  }

  confirm({
    content: $t('system.common.delete.confirm'),
    icon: 'error',
  }).then(async () => {
    await wipe${className}(ids)
      .then(async () => {
        await localGridApi.reload();
        ElMessage.success($t('system.common.delete.success'));
        await props.gridApi.reload();
      })
      .catch(() => {
        ElMessage.error($t('system.common.delete.error'));
      });
  });
};

const restoreMethod = (row?: RowType) => {
  const ids: string[] = row
    ? [row.id]
    : localGridApi.grid.getCheckboxRecords().map((item) => item.id);

  if (ids.length === 0) {
    ElMessage.warning($t('system.common.restore.warning'));
    return;
  }

  confirm({
    content: $t('system.common.restore.confirm'),
    icon: 'error',
  }).then(async () => {
    try {
      await restore${className}(ids);
      await localGridApi.reload();
      await props.gridApi.reload();
      ElMessage.success($t('system.common.restore.success'));
    } catch {
      ElMessage.error($t('system.common.restore.error'));
    }
  });
};
</script>

<template>
  <Page>
    <Grid>
<#assign filteredProperties = columnsViews?filter(p -> p.propDictId?exists && p.propDictId?has_content)>
<#if filteredProperties?has_content>
<#list columnsViews as property>
<#if property?has_content && property.propDictId?has_content>
      <template #${property.propJavaEntity}="{ row }">
        <Dict dict-key="${property.propDictStr}" :value="row.${property.propJavaEntity}" />
      </template>
</#if>
</#list>
</#if>
      <template #toolbar-actions>
        <ElButton
          class="mr-2"
          bg
          text
          type="primary"
          @click="restoreMethod()"
          v-if="hasAccessByCodes(['${requestName}:restore'])"
        >
          {{ <#noparse>$t('system.common.button.restore')</#noparse> }}
        </ElButton>
        <ElButton
          class="mr-2"
          bg
          text
          type="danger"
          @click="wipeMethod()"
          v-if="hasAccessByCodes(['${requestName}:wipe'])"
        >
          {{ <#noparse>$t('system.common.button.delete')</#noparse> }}
        </ElButton>
      </template>
      <template #action="{ row }">
        <ElButton
          type="success"
          link
          @click="restoreMethod(row)"
          v-if="hasAccessByCodes(['${requestName}:restore'])"
        >
          {{ <#noparse>$t('system.common.button.restore')</#noparse> }}
        </ElButton>
        <ElButton
          type="danger"
          link
          @click="wipeMethod(row)"
          v-if="hasAccessByCodes(['${requestName}:wipe'])"
        >
          {{ <#noparse>$t('system.common.button.wipe')</#noparse> }}
        </ElButton>
      </template>
    </Grid>
  </Page>
</template>